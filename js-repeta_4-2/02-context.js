//! Видео - 0:10:15...0:27:55

/*
* Контекст стрелки
*
* Контекст внутри стрелки определяется местом ее объявления, а не вызова, 
* и ссылается на контекст родительской функции.
*/
// У стрелочной функции нет своего контекстного значения служебному слову "this". Внутри стрелочной функции, значение контекста или значение ключевого слова "this" определяется не в момент ее вызова, как у обычной функции, а в момент ее объявления. Другими словами, там где было объявлено - "this" (в стрелочной функции), такой контекст и был зафиксирован навсегда.

// Пример использования ключевого слова "this" в теле обычной функции
const showThis = function () {
    console.log('This in "showThis": ', this);
};
// Вызываем функцию "showThis"
showThis(); // => This in "showThis": undefined

// Объявляем переменную "user"
const user = { name: 'Mango' };
// Присваиваем контексту переменной "user" значение функции "showThis"
user.showContext = showThis;

// Вызываем контекст переменной "user"
user.showContext(); // => {name: 'Mango', showContext: ƒ}
console.log('-------------------------------------------');

// Пример использования ключевого слова "this" в теле стрелочной функции, которая является полным аналогом функции "showThis"
const showThisArrow = () => {
    console.log('This in "showThisArrow": ', this);
};
// Вызываем функцию "showThisArrow"
showThisArrow(); // => This in "showThisArrow": undefined

// Присваиваем контексту переменной "user" значение функции "showThisArrow"
user.showContext = showThisArrow;

// Вызываем контекст переменной "user"
user.showContext(); // => undefined
console.log('-------------------------------------------');

// Как можно заметить по результатам выводов в консоль, контекст стрелочной функции, в отличии от объчной функции, - НЕ меняется, и остается неизменно-фиксированым с момента его объявления. Другими словами, контекст стрелочной функции фиксируется в месте ее объявления (в месте использования ключевого слова "this"), и навсегда остается таковым, каким был зафиксирован в месте ее объявления.



/*
* Стрелки как методы объекта
*/
// Из-за особеностей контекста - стрелочные функции НЕ используются в качестве методов объектов. + В некоторых случаях, использование стрелочных функций в качестве методов объекта может привести к возникновению ошибок.

// Пример объекта со стрелочной функцией в качестве метода этого объекта
const user2 = {
    fullName: 'Mango',
    showName: () => {
        console.log('this -> ', this);
        console.log('user2.fullName: ', user2.fullName);
        console.log('this.fullName: ', this.fullName);
    },
};
// Вызываем-активируем метод "showName" объекта "user2"
// user2.showName(); // Раскомментируй и увидешь ошибку в логе

// Как можно видеть из результатов вывода данных в консоль, контекст внутри стрелочной функции зафиксировался на состоянии "undefined", и не позволяет использовать служебное слово "this" для обращения к другим свойствам объекта, в результате чего - возникает ошибка!!!

//*********************************************************



/*
* Стрелки как функции конструктор
*/
// Стрелочная функция НЕ может быть конструктором, т.к. в стрелочных функциях отсутствует встроенный внутренний метод "Construct".

// Пример обычной функции - конструктора
const User = function (name) {
    this.name = name;
}
// Вызов-активация функции "User"
console.log(new User('Mango'));
console.log('-------------------------------------------');

// Пример стрелочной функции - конструктора
const UserArrow = name => {
    this.name = name;
}
// Вызов-активация функции "UserArrow"
// console.log(new UserArrow('Mango')); // Раскомментируй и увидешь ошибку в логе



/*
* Еще один пример на - "стрелка как метод объекта"
*/

const objA = {
    x: 10,
    showX() {
        console.log('"this" в "objA.showX" =>', this);
        console.log('"this.x" в "objA.showX" =>', this.x);

        // // См. в консоли => {y: 10, showThis: ƒ}
        const objB = {
            y: 10,
            showThis() {
                console.log('"this" в "objB.showThis =>" ', this);
            },
        };
        //----------------------------------------------

        // См. в консоли => {x: 10, showX: ƒ}
        // const objB = {
        //     y: 10,
        //     showThis: () => {
        //         console.log('"this" в "objB.showThis =>" ', this);
        //     },
        // };
        //----------------------------------------------

        objB.showThis();
    },
};

// Вызываем-активируем соответствующий метод объекта "objA"
objA.showX();


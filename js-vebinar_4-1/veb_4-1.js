// Пример использования функции в качестве метода объекта
console.log('Пример использования функции в качестве метода объекта:')

// Исходный объект
const user = {
    name: 'Alex',
    birthDate: 1993,
    // 1-й вариант записи
    getAge: function () {
        return 2022 - this.birthDate;
    },
    // 2-й вариант записи
     getAge2() {
        return 2022 - this.birthDate;
    },
    // 3-й вариант записи
    getAge3: () => 2022 - user.birthDate,
    // Ключевое слово "this" в стрелочной функции работает по другому, и не может использоваться так-же, как и в обычной функции.
};
// Выводим в лог значение переменной "user"
console.log('- исходный объект:')
console.table(user);
console.log('-------------------------------------------');

// Вызываем и выводим в лог результат работы метода "getAge()"
console.log('- результат работы метода "getAge()" =>', user.getAge());
console.log('-------------------------------------------');

// Вызываем и выводим в лог результат работы метода "getAge2()"
console.log('- результат работы метода "getAge2()" =>', user.getAge2());
console.log('-------------------------------------------');

// Вызываем и выводим в лог результат работы метода "getAge2()"
console.log('- результат работы метода "getAge3()" =>', user.getAge3());
console.log('*******************************************');


//!========================================================


// Пример-пояснение сути "колл-бек" функций
// Функция высшего порядка
function sum(a, b, display) {
    const result = a + b;
    display(`${a} + ${b} = ${result}`);
    return result;
};

// Колл-бэк функция, которая будет передаваться в функцию "sum" как аргумент. 
function logger(arg) {
    console.log(arg);
};
// Именно то, что функция "logger" передается в качестве аргумента в другую функцию, и определяет ее как - "колл-бек" функцию. Другими словами, любая функция, которая в качестве аргумента передается в какую-то другую функцию и называется - "колл-бек" функцией.

// Вызываем функцию "sum" и передаем ей аргументы
sum(5, 3, logger);
console.log('*******************************************');


//!========================================================


// Полифил - это название самостоятельно написаного (самодельного) метода или функции, которая дублирует уже существующий в языке программирования встроенный в него метод или функцию. В контексте использования JS для "web-приложений", необходимость в создании "полифилов" возникает тогда, когда необходимо использовать какой-то новый метод языка на базе устаревшей версии браузера, который не поддерживает все современные методы встроенные в JS, и требует их адоптации - т.е. переделки под "устаревшую" и/или специфическую платформу браузера.


//!========================================================


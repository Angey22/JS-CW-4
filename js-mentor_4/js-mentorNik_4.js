// Задание №1
console.log('Задание № 1');
console.log('-------------------------------------------');

// Напишите функцию "filterFalse(arr), которая очищает массив от ошибочных (false) значений, в частности значений: false, null, undefined, 0, -0, NaN и ""(пустая строка).

// Исходный массив
const array = [NaN, 0, 77, false, -17, "", undefined, 99, null];

// Создаем 1-й вариант кода
const filterFalse = (arr) => arr.filter(element => element !== false && element !== undefined && element !== null && element !== 0 && element !== '' && element > 0);

// Создаем 2-й вариант кода, с использование метода "Boolean()"
const filterFalse2 = (arr) => arr.filter(element => Boolean(element) && element > 0);

// Создаем 3-й вариант кода, с использование двойной инверсии
const filterFalse3 = (arr) => arr.filter(element => !!(element) && element > 0);
// Первая инверсия (первый знак "!") -> преобразовывает значение в булевое, а вторая инверсия -> переводит его в первоначальный вид. При этом, все служебные значения - "теряются".

// Создаем 4-й вариант кода, на основе встроенной в метод "filter" стандартной проверки, которая как и при двойной инверсии, выполняет проверку на "true" или "false". Называется такая проверка - процес не явного преобразования к булевому типу.
const filterFalse4 = arr => arr.filter(element => element && element > 0);


// Активируем и выводим в лог результат созданного функционального выражения "filterFalse", передавая ему в качестве аргумента массив "array".

// 1-й вариант кода
console.log("1-й вариант:");
console.log(filterFalse(array));
console.log('-------------------------------------------');

// 2-й вариант кода
console.log("2-й вариант:");
console.log(filterFalse2(array));
console.log('-------------------------------------------');

// 3-й вариант кода
console.log("3-й вариант:");
console.log(filterFalse3(array));
console.log('-------------------------------------------');

// 4-й вариант кода
console.log("4-й вариант:");
console.log(filterFalse(array));
console.log('*******************************************');

//!========================================================

// Задание № 2
console.log('Задание № 2');
console.log('-------------------------------------------');

// Напишите функцию "union", которая возвращает массив, что состоит только из уникальных элементов массива.

// Исходный массив
const array1 = [5, 2, 1, -10, 8, 5, 2, 1, -9, 3, 7];
// Выводим в лог переменную "array1"
console.log('Исходный массив - "array1" =>', array1);
console.log('-------------------------------------------');

// 1-й вариант кода функции
const union = array => array.filter((element, index, arr) => arr.indexOf(element) === index);
// Этот вариант кода не решает задачу, т.к. он уберает повторяющиеся элементы из исходного массива, а не копирует уникальные элементы из него, сохраняя их в новом массиве.

// 2-й вариант кода функции
const union2 = array => array1.filter((element, index, arr) => arr.indexOf(element) === arr.lastIndexOf(element));


// Активируем и выводим в лог результат созданного функционального выражения "union", передавая ему в качестве аргумента массив "array1".
// 1-й вариант кода функции
console.log('1-й вариант - "union" =>', union(array1));
console.log('-------------------------------------------');

// 2-й вариант кода функции
console.log('2-й вариант - "union2" =>', union2(array1));
console.log('*******************************************');

//!========================================================

// Задание № 3
console.log('Задание № 3');
console.log('-------------------------------------------');

// Напишите функцию "arrayFilled(len, value)", которая возвращает массив с заданым количеством элементов определяемого аргументом - "len", значения в которых одинаковы для всех элементов создоваемого массива и задаются аргументом - "value".

// 1-й вариант кода функции, на основе использованием цыкла "for"
const arrayFilled = (len, value) => {
    const array = [];
    for (let i = 0; i < len; i += 1) {
        array.push(value);
    };
    return array;
};

// 2-й вариант кода функции, на основе использования методов "Array()" и "fill()".
const arrayFilled2 = (len, value) => {
    return Array(len).fill(value);
};
// Описание метода "fill()" (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).
// Описание конструктора "Array()" (https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array).

// Активируем и выводим в лог результат созданного функционального выражения "arrayFilled".
// 1-й вариант кода функции
console.log('1-й вариант кода функции:');
console.log('"arrayFilled(5, 1)" =>', arrayFilled(5, 1));
console.log('"arrayFilled(4, 12)" =>', arrayFilled(4, 12));
console.log('-------------------------------------------');

// 2-й вариант кода функции
console.log('2-й вариант кода функции:');
console.log('"arrayFilled2(5, 1)" =>', arrayFilled2(5, 1));
console.log('"arrayFilled2(4, 12)" =>', arrayFilled2(4, 12));
console.log('*******************************************');

//!========================================================

// Задание № 4
console.log('Задание № 4');
console.log('-------------------------------------------');

// Перед Вами переменная "str", которая содержит в себе строку. Напишите код функции, которая создаст массив, что будет складываться с первых букв слов строки "str".

// Исходная строка
const str = 'Каждый охотник желает знать, где сидит фазан.';
// Результат обработки этой строки, должен выглядеть следующим образом => [К, о, ж, з, г, с, ф]

// 1-й вариант кода функции
const arrStr = str.split(' ');
console.log("arrStr", arrStr);

const arrLetter = arrStr.map(item => item[0]);
console.log("arrLetter", arrLetter);
console.log('*******************************************');

//!========================================================

// Задание № 5
console.log('Задание № 5');
console.log('-------------------------------------------');

// Напишите функцию "removeItem(arr, num)", которая удаляет из массива - "arr", элемент - "num". Передаваемые созданной функции в качестве аргументов.

// 1-й вариант кода функции
const removeItem = (arr, num) => arr.filter(element => element !== num);

// 2-й вариант кода функции
function removeItem2(arr, num) {
    let array = [];

    arr.forEach(el => {
        if (el != num) { array.push(el); };
    });

    return array;
};

// Активируем и выводим в лог результат работы функции
// 1-й вариант кода функции
console.log('1-й вариант кода - "removeItem" =>', removeItem([3, 5, 7, 8, 5], 5));
console.log('-------------------------------------------');

// 2-й вариант кода функции
console.log('2-й вариант кода - "removeItem2" =>', removeItem2([3, 5, 7, 8, 5], 5));
console.log('*******************************************');

//!========================================================

// Задание № 6
console.log('Задание № 6');
console.log('-------------------------------------------');

// На основе обработки исходного варианта массива объектов, находящегося в переменной "studentRecords", необходимо получить массив имен студентов, записанных большими буквами.

// Плагин для "VS code" - "Tabnine AI Autocomplete for ...", подставляет варианты кода для их автоматической вставки.

// Исходный массив объектов
let studentRecords = [
    { name: 'John', id: 123, marks: 98 },
    { name: 'Baba', id: 101, marks: 23 },
    { name: 'yaga', id: 200, marks: 45 },
    { name: 'Wick', id: 115, marks: 75 },
];
// Выводим в лог переменную "studentRecords"
console.log('Исходный массив объектов - "studentRecords":');
console.table(studentRecords);
console.log('-------------------------------------------');

// Создаем функциональное выражение "student"
const student = studentRecords.map(student => student.name.toUpperCase());

// Активируем и выводим в лог результат работы функции
console.log('"student" =>', student);
console.log('*******************************************');

//!========================================================

// Задание № 7
console.log('Задание № 7');
console.log('-------------------------------------------');

// Напишите код, который отсортирует исходный массив объектов "litmir" по значениям свойств "title" содержащехся в нем объектов.

// Исходный массив объектов
const litmir = [
    { author: 'Хэленка', title: 'Улетела сказка' },
    { author: 'Коул Кресли', title: 'Востание Аркан' },
    { author: 'Рейчел Мид', title: 'Золотая лилия' },
];
// Выводим в лог переменную "studentRecords"
console.log('Исходный массив объектов - "litmir":');
console.table(litmir);
console.log('-------------------------------------------');

// Создаем функциональное выражение "litmirSort"
const litmirSort = [...litmir].sort((a, b) => a.title.localeCompare(b.title));

// Активируем и выводим в лог результат работы функции
console.log('Результат сортировки - "litmirSort":');
console.table(litmirSort);
console.log('*******************************************');

//!========================================================

// Задание № 8
console.log('Задание № 8');
console.log('-------------------------------------------');

// Отсортировать массив чисел "numbers"

// Исходный массив чисел
const numbers = [2, 10, 25, 48, 65, 90];
// Выводим в лог переменную "numbers"
console.log('Исходный массив чисел - "numbers" =>', numbers);
console.log('-------------------------------------------');

// Сортируем методом "sort" с использованием настроек этого метода "по умолчанию", основаному на преобразовании элементов массива в строку и последующей их сортировке на основе значений "Юникода" соответствующих строк.
const sortNumbers = [...numbers].sort();
console.log('Сортируем по значениям "Юникода" - "sortNumbers" =>', sortNumbers);
console.log('-------------------------------------------');

// Сортируем по возрастанию методом "sort" с использованием "колл-бека"
const sortNumbers2 = [...numbers].sort((a, b) => a - b);
console.log('Сортируем по возрастанию - "sortNumbers2" =>', sortNumbers2);
console.log('-------------------------------------------');

// Сортируем по убыванию методом "sort" с использованием "колл-бека"
const sortNumbers3 = [...numbers].sort((a, b) => b - a);
console.log('Сортируем по убыванию - "sortNumbers3" =>', sortNumbers3);
console.log('*******************************************');

//!========================================================

// Задание № 9
console.log('Задание № 9');
console.log('-------------------------------------------');

// Необходимо на основе исходного массива объектов "studentRecords2" получить массив имен студентов (свойство "name") в верхнем регистре, которые набрали более 50-и балов (свойство "marks").

// Исходный массив объектов
let studentRecords2 = [
    { name: 'John', id: 123, marks: 98 },
    { name: 'Baba', id: 101, marks: 23 },
    { name: 'yaga', id: 200, marks: 45 },
    { name: 'Wick', id: 115, marks: 75 },
];
// Выводим в лог переменную "studentRecords"
console.log('Исходный массив объектов - "studentRecords2":');
console.table(studentRecords2);
console.log('-------------------------------------------');

// Создаем функциональное выражение
// 1-й вариант кода с использованием "чейнинга" методов
const goodStudents = studentRecords2.filter(student => student.marks > 50).map(student => student.name.toUpperCase());

// 2-й вариант кода с использованием деструкторизауии
const filtredStudents = studentRecords2.filter(({ marks }) => marks > 50);
const studentNames = filtredStudents.map(({name}) => name.toUpperCase());

// Активируем и выводим в лог результат работы функции
// 1-й вариант кода
console.log('1-й вариант кода - "goodStudents" =>', goodStudents)
console.log('-------------------------------------------');

// 2-й вариант кода
console.log('2-й вариант кода - "studentNames" =>', studentNames)
console.log('*******************************************');

//!========================================================

// Задание № 10
console.log('Задание № 10');
console.log('-------------------------------------------');

// Напишите функцию "findCouple(array, number)", которая принимает в качестве аргумента исходный массив чисел - "array" и число - "number". После чего, выполняет поиск среди элементов массива "пары" чисел, которые в сумме равны значению "number".

// Исходные число и массив чисел
var num = 5;
var arr = [1, 6, 5, 2, 7, 5, 1, 4, 3, 9, 8, 11, 10, 18];
// Выводим в лог переменнеы "num" и "arr"
console.log(`Исходные: число "num" = ${num} и массив чисел "arr" => ${arr}`);
console.log('-------------------------------------------');

// Код функции
// 1-й вариант кода
function findCouple(array, number) {
    const numbers = [];

    array.forEach(element => {
        array.forEach(el => {
            if (element + el === number) numbers.push(element, el); 
        });
    });
    return [...new Set(numbers)];
};

// Активируем и выводим в лог результат работы функции
// 1-й вариант кода
console.log(findCouple(arr, num));
// Ваша пара чисел: 1 + 4, и 2 + 3.
console.log('*******************************************');

//!========================================================

// Задание № 11
console.log('Задание № 11');
console.log('-------------------------------------------');

// Необходимо создать функцию для вычисления общей суммы бало всех студентов, при обработке исходного массива объектов "studentRecords3", используя свойство - "marks".

// Исходный массив объектов
let studentRecords3 = [
    { name: 'John', id: 123, marks: 98 },
    { name: 'Baba', id: 101, marks: 23 },
    { name: 'yaga', id: 200, marks: 45 },
    { name: 'Wick', id: 115, marks: 75 },
];
// Выводим в лог переменную "studentRecords"
console.log('Исходный массив объектов - "studentRecords3":');
console.table(studentRecords3);
console.log('-------------------------------------------');

// Создаем функциональное выражение
const studentMarks = studentRecords3.reduce((previousValue, number) => previousValue + number.marks, 0);

// Выводим в лог значение функционального выражения
console.log('"studentMarks" =', studentMarks)
console.log('*******************************************');

//!========================================================

// Задание № 12
console.log('Задание № 12');
console.log('-------------------------------------------');

// Необходимо вычислить общую сумму балов студентов с "id" более "120".

// Исходный массив объектов
const studentRecords4 = [
    { name: 'John', id: 123, marks: 98 },
    { name: 'Baba', id: 101, marks: 23 },
    { name: 'yaga', id: 200, marks: 45 },
    { name: 'Wick', id: 115, marks: 75 },
];
// Выводим в лог переменную "studentRecords"
console.log('Исходный массив объектов - "studentRecords4":');
console.table(studentRecords4);
console.log('-------------------------------------------');

// Код функции
// 1-й вариант кода
const studentUp120 = studentRecords4.filter(student => student.id > 120).reduce((previousValue, number) => previousValue + number.marks, 0);

// 2-й вариант кода, с использованием деструкторизации
const studentUp1202 = studentRecords4.filter(({ id }) => id > 120).reduce((previousValue, { marks }) => previousValue + marks, 0);

// Выводим в лог значение функционального выражения
// 1-й вариант кода
console.log('1-й вариант - "studentUp120" =', studentUp120);
console.log('-------------------------------------------');

// 2-й вариант кода
console.log('2-й вариант - "studentUp1202" =', studentUp1202);
console.log('*******************************************');

//!========================================================

// Задание № 13
console.log('Задание № 13');
console.log('-------------------------------------------');

// Необхадимо значение переменной "a" заменить на значение переменной "b", а значение переменной "b" на - "a", соответственно.

// Исходные переменные
let a = 'red';
let b = 'green';
// Выводим в лог исходные значения переменных
console.log('Исходные значения переменных:');
console.log('- "a" =>', a);
console.log('- "b"  =>', b);
console.log('-------------------------------------------');

// Решение задачи
// 1-й вариант кода
// const c = a;
// a = b;
// b = c;

// 2-й вариант кода
[b, a] = [a, b];

// Выводим в лог решение задачи
console.log('Решение задачи:');
console.log('- "a" =>', a);
console.log('- "b" =>', b);
console.log('*******************************************');

//!========================================================

// Задание № 14
console.log('Задание № 14');
console.log('-------------------------------------------');

// Задание основано на использовании методов: "map()", "reduce()" и "filter()". Необходимо получить сумму балов всех студентов, которые имеют более 50-и балов, после начисления всем учащимся поощрения в виде 15-и балов.

// Описание алгоритма нужной функции:
// Сначала, используя метод "map()", добавляем стуентам у которых меньше 50-и балов по 15-ь балов поощрения.
// После чего, используя метод "filter()" выбираем из всех, студентов у которых более 50-и балов.
// В конце, с помощью метода "reduce()", вычисляем общую сумму балов у выбраных на предыдущем шаге студентов.

// Исходный массив объектов
const studentRecords5 = [
    { name: 'John', id: 123, marks: 98 },
    { name: 'Baba', id: 101, marks: 23 },
    { name: 'yaga', id: 200, marks: 45 },
    { name: 'Wick', id: 115, marks: 75 },
];
// Выводим в лог переменную "studentRecords5"
console.log('Исходный массив объектов - "studentRecords5":');
console.table(studentRecords5);
console.log('-------------------------------------------');

// Код функции
const vipStudent = studentRecords5.map(element => {
    if (element.marks < 50) {
        element.marks += 15;
    };
    return element;
}).filter(student => student.marks > 50).reduce((acc, student) => acc + student.marks, 0);

// Выводим в лог значение функционального выражения
console.log('Cумма балов успешных студентов =', vipStudent);
console.log('*******************************************');

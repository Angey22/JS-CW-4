// Задание №1
console.log('Задание № 1');
console.log('-------------------------------------------');

// Напишите функцию "filterFalse(arr), которая очищает массив от ошибочных (false) значений, в частности значений: false, null, undefined, 0, -0, NaN и ""(пустая строка).

// Исходный массив
const array = [NaN, 0, 77, false, -17, "", undefined, 99, null];

// Создаем 1-й вариант кода
const filterFalse = (arr) => arr.filter(element => element !== false && element !== undefined && element !== null && element !== 0 && element !== '' && element > 0);

// Создаем 2-й вариант кода, с использование метода "Boolean()"
const filterFalse2 = (arr) => arr.filter(element => Boolean(element) && element > 0);

// Создаем 3-й вариант кода, с использование двойной инверсии
const filterFalse3 = (arr) => arr.filter(element => !!(element) && element > 0);
// Первая инверсия (первый знак "!") -> преобразовывает значение в булевое, а вторая инверсия -> переводит его в первоначальный вид. При этом, все служебные значения - "теряются".

// Создаем 4-й вариант кода, на основе встроенной в метод "filter" стандартной проверки, которая как и при двойной инверсии, выполняет проверку на "true" или "false". Называется такая проверка - процес не явного преобразования к булевому типу.
const filterFalse4 = arr => arr.filter(element => element && element > 0);


// Активируем и выводим в лог результат созданного функционального выражения "filterFalse", передавая ему в качестве аргумента массив "array".

// 1-й вариант кода
console.log("1-й вариант:");
console.log(filterFalse(array));
console.log('-------------------------------------------');

// 2-й вариант кода
console.log("2-й вариант:");
console.log(filterFalse2(array));
console.log('-------------------------------------------');

// 3-й вариант кода
console.log("3-й вариант:");
console.log(filterFalse3(array));
console.log('-------------------------------------------');

// 4-й вариант кода
console.log("4-й вариант:");
console.log(filterFalse(array));
console.log('*******************************************');

//!========================================================

// Задание № 2
console.log('Задание № 2');
console.log('-------------------------------------------');

// Напишите функцию "union", которая возвращает массив, что состоит только из уникальных элементов массива.

// Исходный массив
const array1 = [5, 2, 1, -10, 8, 5, 2, 1, -9, 3, 7];
// Выводим в лог переменную "array1"
console.log('Исходный массив - "array1" =>', array1);
console.log('-------------------------------------------');

// 1-й вариант кода функции
const union = array => array.filter((element, index, arr) => arr.indexOf(element) === index);
// Этот вариант кода не решает задачу, т.к. он уберает повторяющиеся элементы из исходного массива, а не копирует уникальные элементы из него, сохраняя их в новом массиве.

// 2-й вариант кода функции
const union2 = array => array1.filter((element, index, arr) => arr.indexOf(element) === arr.lastIndexOf(element));


// Активируем и выводим в лог результат созданного функционального выражения "union", передавая ему в качестве аргумента массив "array1".
// 1-й вариант кода функции
console.log('1-й вариант - "union" =>', union(array1));
console.log('-------------------------------------------');

// 2-й вариант кода функции
console.log('2-й вариант - "union2" =>', union2(array1));
console.log('*******************************************');

//!========================================================

// Задание № 3
console.log('Задание № 3');
console.log('-------------------------------------------');

// Напишите функцию "arrayFilled(len, value)", которая возвращает массив с заданым количеством элементов определяемого аргументом - "len", значения в которых одинаковы для всех элементов создоваемого массива и задаются аргументом - "value".

// 1-й вариант кода функции, на основе использованием цыкла "for"
const arrayFilled = (len, value) => {
    const array = [];
    for (let i = 0; i < len; i += 1) {
        array.push(value);
    };
    return array;
};

// 2-й вариант кода функции, на основе использования методов "Array()" и "fill()".
const arrayFilled2 = (len, value) => {
    return Array(len).fill(value);
};
// Описание метода "fill()" (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).
// Описание конструктора "Array()" (https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array).

// Активируем и выводим в лог результат созданного функционального выражения "arrayFilled".
// 1-й вариант кода функции
console.log('1-й вариант кода функции:');
console.log('"arrayFilled(5, 1)" =>', arrayFilled(5, 1));
console.log('"arrayFilled(4, 12)" =>', arrayFilled(4, 12));
console.log('-------------------------------------------');

// 2-й вариант кода функции
console.log('2-й вариант кода функции:');
console.log('"arrayFilled2(5, 1)" =>', arrayFilled2(5, 1));
console.log('"arrayFilled2(4, 12)" =>', arrayFilled2(4, 12));
console.log('*******************************************');

//!========================================================

// Задание № 4
console.log('Задание № 4');
console.log('-------------------------------------------');

// Перед Вами переменная "str", которая содержит в себе строку. Напишите код функции, которая создаст массив, что будет складываться с первых букв слов строки "str".

// Исходная строка
const str = 'Каждый охотник желает знать, где сидит фазан.';
// Результат обработки этой строки, должен выглядеть следующим образом => [К, о, ж, з, г, с, ф]

// 1-й вариант кода функции
const arrStr = str.split(' ');
console.log("arrStr", arrStr);

const arrLetter = arrStr.map(item => item[0]);
console.log("arrLetter", arrLetter);
console.log('*******************************************');

//!========================================================

// Задание № 5
console.log('Задание № 5');
console.log('-------------------------------------------');

// Напишите функцию "removeItem(arr, num)", которая удаляет из массива - "arr", элемент - "num". Передаваемые созданной функции в качестве аргументов.

// 1-й вариант кода функции
const removeItem = (arr, num) => arr.filter(element => element !== num);

// Активируем и выводим в лог результат работы функции
// 1-й вариант кода функции
console.log('"removeItem" =>', removeItem([3, 5, 7, 8, 5], 5));
console.log('-------------------------------------------');

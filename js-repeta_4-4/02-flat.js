/*
 * Array.prototype.flat(depth)
 * - Разглаживает массив до указанной глубины
 * - По умолчанию глубина 1
 */

// Исходный многомерный массив
const array = [1, 2, [4, [5]], [6, [7, 8, [9]]]];
// Выводим в лог переменную "array"
console.log('Исходный 3-х уровневый многомерный массив "array":')
console.log(array);
console.log('------------------------------------------');

// Выводим в лог копию "разглаженного" на 1-н уровень многомерного массива "array" 
console.log('"Разглаженный" на 1-н уровень массив "array":');
console.log(array.flat());
console.log('------------------------------------------');

// Выводим в лог копию "разглаженного" на 2-а уровеня многомерного массива "array" 
console.log('"Разглаженный" на 2-а уровня массив "array":');
console.log(array.flat(2));
console.log('------------------------------------------');

// Выводим в лог копию "разглаженного" на 3-и уровеня многомерного массива "array" 
console.log('"Разглаженный" на 3-и уровня массив "array":');
console.log(array.flat(3));
console.log('******************************************');



/*
 * Array.prototype.flatMap(callback)
 * - Комбинация map + flat
 */

// Исходный массив объектов - база данных
const tweets = [
    { id: '000', likes: 5, tags: ['js', 'nodejs'] },
    { id: '001', likes: 2, tags: ['html', 'css'] },
    { id: '002', likes: 17, tags: ['html', 'js', 'nodejs'] },
    { id: '003', likes: 8, tags: ['css', 'react'] },
    { id: '004', likes: 0, tags: ['js', 'nodejs', 'react'] },
];
// Выводим в лог переменную "tweets"
console.log('Исходный массив объектов - "tweets":');
console.table(tweets);
console.log('------------------------------------------');

// Создаем функцию на основе метода "reduce()", и собираем в переменную "tags" массив всех тегов из исходного массива - базы данных.
const tags = tweets.reduce((acc, tweet) => [...acc, ...tweet.tags], []);
// Выводим в лог значение переменной "tags"
console.log('Массив-массивов "tags" =>', tags);
console.log('------------------------------------------');


// Скомбенируем метод "map()" и метод "flat()" для получения "массива-массивов подобного 'tags'"
const tags2 = tweets.map(t => t.tags).flat();
// Выводим в лог значение переменной "tags"
console.log('Массив-массивов "tags2" =>', tags2);
console.log('------------------------------------------');

// Важным недостатком комбинированного использования нескольких методов подряд, является то, что обработка исходного массива объектов производится 2-а раза, каждым из соответствующих методом отдельно. Для устранения этого недостатка и интенсификации процесса обработки, на основе методов "map()" и "flat()" был создан метод - "flatMap()". 


// Используем метод "flatMap()", который является полным аналого комбинированного использования методов "map()" и "flat()" для получения "массива-массивов подобного 'tags'"
const tags3 = tweets.flatMap(t => t.tags);
// Выводим в лог значение переменной "tags"
console.log('Массив-массивов "tags3" =>', tags3);
console.log('------------------------------------------');

// Особенностью использования метода "flatMap()" является то, что он работает на 1-у вложенность, т.е., при необходимости выполнить операцию "разглаживания" многомерного массива, этот метод может его "разгладить" только на 1-н уровень.


